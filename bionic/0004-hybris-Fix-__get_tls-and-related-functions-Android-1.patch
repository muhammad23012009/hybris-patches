From 2b22da18359e28be5d2bba5657fd43f32c09d5c1 Mon Sep 17 00:00:00 2001
From: Franz-Josef Haider <franz.haider@jolla.com>
Date: Thu, 8 Oct 2020 14:43:42 +0000
Subject: [PATCH 4/9] (hybris) Fix __get_tls and related functions (>=Android
 10)

Signed-off-by: Simonas Leleiva <simonas.leleiva@jolla.com>
Change-Id: I24486873be638a1a8cd123705ba2e51ec7414b94
---
 libc/Android.bp                         |  1 +
 libc/bionic/ndk_cruft.cpp               | 16 +++++----
 libc/bionic/pthread_internal.h          |  6 ++--
 libc/hybris_support.c                   |  4 +++
 libc/libc.map.txt                       |  1 +
 libc/platform/bionic/tls.h              | 22 ++++++------
 libc/platform/bionic/tls_internal.h     | 45 +++++++++++++++++++++++++
 libc/platform/scudo_platform_tls_slot.h |  2 +-
 8 files changed, 75 insertions(+), 22 deletions(-)
 create mode 100644 libc/hybris_support.c
 create mode 100644 libc/platform/bionic/tls_internal.h

diff --git a/libc/Android.bp b/libc/Android.bp
index fd14aea..990c8bc 100644
--- a/libc/Android.bp
+++ b/libc/Android.bp
@@ -1038,6 +1038,7 @@ cc_library_static {
         "stdio/stdio_ext.cpp",
         "stdio/vfscanf.cpp",
         "stdio/vfwscanf.cpp",
+        "hybris_support.c",
 
         // TODO: why isn't this in a static-libc-only module?
         // This contains a weak stub implementation of __find_icu_symbol for wctype.cpp,
diff --git a/libc/bionic/ndk_cruft.cpp b/libc/bionic/ndk_cruft.cpp
index b15a317..824982a 100644
--- a/libc/bionic/ndk_cruft.cpp
+++ b/libc/bionic/ndk_cruft.cpp
@@ -49,6 +49,13 @@
 
 extern "C" {
 
+// TODO: does anything still need this?
+// with hybris we need it, so thanks for keeping it.
+void** __get_tls() {
+#include "platform/bionic/tls_internal.h"
+    return __get_tls_internal();
+}
+
 // LP64 doesn't need to support any legacy cruft.
 #if !defined(__LP64__)
 
@@ -71,11 +78,8 @@ int __open() {
   abort();
 }
 
-// TODO: does anything still need this?
-void** __get_tls() {
-#include "platform/bionic/tls.h"
-  return __get_tls();
-}
+
+
 
 // This non-standard function was in our <string.h> for some reason.
 void memswap(void* m1, void* m2, size_t n) {
@@ -390,4 +394,4 @@ int putw(int value, FILE* fp) {
 
 #endif // !defined (__LP64__)
 
-} // extern "C"
+} // extern "C"
\ No newline at end of file
diff --git a/libc/bionic/pthread_internal.h b/libc/bionic/pthread_internal.h
index 091f711..90b43ea 100644
--- a/libc/bionic/pthread_internal.h
+++ b/libc/bionic/pthread_internal.h
@@ -211,16 +211,16 @@ __LIBC_HIDDEN__ void __pthread_internal_remove_and_free(pthread_internal_t* thre
 __LIBC_HIDDEN__ void __find_main_stack_limits(uintptr_t* low, uintptr_t* high);
 
 static inline __always_inline bionic_tcb* __get_bionic_tcb() {
-  return reinterpret_cast<bionic_tcb*>(&__get_tls()[MIN_TLS_SLOT]);
+  return reinterpret_cast<bionic_tcb*>(&__get_tls_hooks()[MIN_TLS_SLOT]);
 }
 
 // Make __get_thread() inlined for performance reason. See http://b/19825434.
 static inline __always_inline pthread_internal_t* __get_thread() {
-  return static_cast<pthread_internal_t*>(__get_tls()[TLS_SLOT_THREAD_ID]);
+  return static_cast<pthread_internal_t*>(__get_tls_hooks()[TLS_SLOT_THREAD_ID]);
 }
 
 static inline __always_inline bionic_tls& __get_bionic_tls() {
-  return *static_cast<bionic_tls*>(__get_tls()[TLS_SLOT_BIONIC_TLS]);
+  return *static_cast<bionic_tls*>(__get_tls_hooks()[TLS_SLOT_BIONIC_TLS]);
 }
 
 static inline __always_inline TlsDtv* __get_tcb_dtv(bionic_tcb* tcb) {
diff --git a/libc/hybris_support.c b/libc/hybris_support.c
new file mode 100644
index 0000000..2784c85
--- /dev/null
+++ b/libc/hybris_support.c
@@ -0,0 +1,4 @@
+void** __get_tls_hooks(void) {
+#include "platform/bionic/tls_internal.h"
+  return __get_tls_internal();
+}
diff --git a/libc/libc.map.txt b/libc/libc.map.txt
index 2c8ec07..73dc54c 100644
--- a/libc/libc.map.txt
+++ b/libc/libc.map.txt
@@ -40,6 +40,7 @@ LIBC {
     __fsetlocking; # introduced=23
     __fstatfs64; # arm x86
     __fwritable; # introduced=23
+    __get_tls_hooks; # arm arm64 x86 introduced=21
     __get_h_errno;
     __getcpu; # arm x86 introduced-arm=12 introduced-x86=12
     __getcwd; # arm x86
diff --git a/libc/platform/bionic/tls.h b/libc/platform/bionic/tls.h
index e01eccd..7bb292a 100644
--- a/libc/platform/bionic/tls.h
+++ b/libc/platform/bionic/tls.h
@@ -28,18 +28,16 @@
 
 #pragma once
 
-#if defined(__aarch64__)
-# define __get_tls() ({ void** __val; __asm__("mrs %0, tpidr_el0" : "=r"(__val)); __val; })
-#elif defined(__arm__)
-# define __get_tls() ({ void** __val; __asm__("mrc p15, 0, %0, c13, c0, 3" : "=r"(__val)); __val; })
-#elif defined(__i386__)
-# define __get_tls() ({ void** __val; __asm__("movl %%gs:0, %0" : "=r"(__val)); __val; })
-#elif defined(__riscv)
-# define __get_tls() ({ void** __val; __asm__("mv %0, tp" : "=r"(__val)); __val; })
-#elif defined(__x86_64__)
-# define __get_tls() ({ void** __val; __asm__("mov %%fs:0, %0" : "=r"(__val)); __val; })
-#else
-#error unsupported architecture
+#ifdef __cplusplus
+extern "C" {
+ 
 #endif
+void **__get_tls(void);
+void **__get_tls_hooks(void);
+#ifdef __cplusplus
+}
+#endif
+
+#include "tls_internal.h"
 
 #include "tls_defines.h"
diff --git a/libc/platform/bionic/tls_internal.h b/libc/platform/bionic/tls_internal.h
new file mode 100644
index 0000000..690ceac
--- /dev/null
+++ b/libc/platform/bionic/tls_internal.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef __BIONIC_PRIVATE_GET_TLS_INTERNAL_H_
+#define __BIONIC_PRIVATE_GET_TLS_INTERNAL_H_
+
+#if defined(__aarch64__)
+# define __get_tls_internal() ({ void** __val; __asm__("mrs %0, tpidr_el0" : "=r"(__val)); __val; })
+#elif defined(__arm__)
+# define __get_tls_internal() ({ void** __val; __asm__("mrc p15, 0, %0, c13, c0, 3" : "=r"(__val)); __val; })
+#elif defined(__i386__)
+# define __get_tls_internal() ({ void** __val; __asm__("movl %%gs:0, %0" : "=r"(__val)); __val; })
+#elif defined(__x86_64__)
+# define __get_tls_internal() ({ void** __val; __asm__("mov %%fs:0, %0" : "=r"(__val)); __val; })
+#else
+#error unsupported architecture
+#endif
+
+#endif /* __BIONIC_PRIVATE_GET_TLS_INTERNAL_H_ */
+
diff --git a/libc/platform/scudo_platform_tls_slot.h b/libc/platform/scudo_platform_tls_slot.h
index a86b828..f668e83 100644
--- a/libc/platform/scudo_platform_tls_slot.h
+++ b/libc/platform/scudo_platform_tls_slot.h
@@ -31,5 +31,5 @@
 #include "bionic/tls.h"
 
 inline uintptr_t* _Nonnull getPlatformAllocatorTlsSlot() {
-  return reinterpret_cast<uintptr_t*>(&__get_tls()[TLS_SLOT_SANITIZER]);
+  return reinterpret_cast<uintptr_t*>(&__get_tls_hooks()[TLS_SLOT_SANITIZER]);
 }
-- 
2.45.2

