From dcaac4fdb62d61b9af3b4d698f7ba3a83ea5c968 Mon Sep 17 00:00:00 2001
From: Matti Lehtimaki <matti.lehtimaki@jolla.com>
Date: Thu, 5 Nov 2020 20:46:35 +0200
Subject: [PATCH 09/12] (hybris) Fix 32-bit vs 64-bit size mismatch in codecs.

Change-Id: Ibce3dc350c14c141a62ab14d1eca22521a9387be
---
 media/libstagefright/ACodec.cpp | 35 +++++++++++++++++++++++++++++++--
 1 file changed, 33 insertions(+), 2 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index f9ceef2..346962e 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -912,10 +912,11 @@ status_t ACodec::allocateBuffersOnPort(OMX_U32 portIndex) {
             // Always allocate VideoNativeMetadata if using ANWBuffer.
             // OMX might use gralloc source internally, but we don't share
             // metadata buffer with OMX, OMX has its own headers.
+            // hybris: allocate buffer that can fit 64-bit native handle if compiled in 64-bit mode
             if (mode == IOMX::kPortModeDynamicANWBuffer) {
-                bufSize = sizeof(VideoNativeMetadata);
+                bufSize = sizeof(VideoNativeMetadata_ptrSized);
             } else if (mode == IOMX::kPortModeDynamicNativeHandle) {
-                bufSize = sizeof(VideoNativeHandleMetadata);
+                bufSize = sizeof(VideoNativeHandleMetadata_ptrSized);
             }
 
             size_t conversionBufferSize = 0;
@@ -6465,6 +6466,36 @@ void ACodec::BaseState::onInputBufferFilled(const sp<AMessage> &msg) {
                             bufferID, graphicBuffer, flags, timeUs, info->mFenceFd);
                     }
                     break;
+#else
+                // hybris: convert data from 64-bit camera process to 32-bit OMX if needed
+                case IOMX::kPortModeDynamicNativeHandle:
+                    if (info->mCodecData->size() >= sizeof(VideoNativeHandleMetadata_ptrSized)
+                            && sizeof(VideoNativeHandleMetadata) != sizeof(VideoNativeHandleMetadata_ptrSized)) {
+                        VideoNativeHandleMetadata_ptrSized *vnhmd =
+                            (VideoNativeHandleMetadata_ptrSized*)info->mCodecData->base();
+                        sp<NativeHandle> handle = NativeHandle::create(
+                                (native_handle *)vnhmd->pHandle, false /* ownsHandle */);
+                        err2 = mCodec->mOMXNode->emptyBuffer(
+                            bufferID, handle, flags, timeUs, info->mFenceFd);
+                    }
+                    break;
+                case IOMX::kPortModeDynamicANWBuffer:
+                    if (info->mCodecData->size() >= sizeof(VideoNativeMetadata_ptrSized)
+                            && sizeof(VideoNativeMetadata) != sizeof(VideoNativeMetadata_ptrSized)) {
+                        VideoNativeMetadata_ptrSized *vnmd = (VideoNativeMetadata_ptrSized*)info->mCodecData->base();
+                        sp<GraphicBuffer> graphicBuffer(
+                            new GraphicBuffer((const native_handle_t*)vnmd->pBuffer->handle,
+                                GraphicBuffer::HandleWrapMethod::WRAP_HANDLE,
+                                vnmd->pBuffer->width,
+                                vnmd->pBuffer->height,
+                                (android::PixelFormat)vnmd->pBuffer->format,
+                                1,
+                                vnmd->pBuffer->usage,
+                                vnmd->pBuffer->stride));
+                        err2 = mCodec->mOMXNode->emptyBuffer(
+                            bufferID, graphicBuffer, flags, timeUs, info->mFenceFd);
+                    }
+                    break;
 #endif
                 default:
                     ALOGW("Can't marshall %s data in %zu sized buffers in %zu-bit mode",
-- 
2.45.2

