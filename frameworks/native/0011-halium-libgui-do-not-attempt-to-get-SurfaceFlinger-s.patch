From fe8f797a82c9f4c587d64cc68ef4d35a18c8aa9c Mon Sep 17 00:00:00 2001
From: TheKit <thekit@disroot.org>
Date: Sun, 16 Jul 2023 21:39:02 +0000
Subject: [PATCH 11/12] (halium) libgui: do not attempt to get SurfaceFlinger
 service

Change-Id: I98090cf977d3c3c3e4fbbda3a244c0823e1bb5b3
---
 libs/gui/Surface.cpp               | 22 ++++++++++++++++++++--
 libs/gui/SurfaceComposerClient.cpp |  5 +++++
 2 files changed, 25 insertions(+), 2 deletions(-)

diff --git a/libs/gui/Surface.cpp b/libs/gui/Surface.cpp
index 086544e..44f0f12 100644
--- a/libs/gui/Surface.cpp
+++ b/libs/gui/Surface.cpp
@@ -137,11 +137,17 @@ Surface::~Surface() {
 }
 
 sp<ISurfaceComposer> Surface::composerService() const {
-    return ComposerService::getComposerService();
+    // Halium: SurfaceFlinger is not running
+    // return ComposerService::getComposerService();
+
+    return nullptr;
 }
 
 sp<gui::ISurfaceComposer> Surface::composerServiceAIDL() const {
-    return ComposerServiceAIDL::getComposerService();
+    // Halium: SurfaceFlinger is not running
+    // return ComposerServiceAIDL::getComposerService();
+
+    return nullptr;
 }
 
 nsecs_t Surface::now() const {
@@ -193,6 +199,10 @@ status_t Surface::getLastQueuedBuffer(sp<GraphicBuffer>* outBuffer,
 status_t Surface::getDisplayRefreshCycleDuration(nsecs_t* outRefreshDuration) {
     ATRACE_CALL();
 
+    // Halium: SurfaceFlinger is not running
+    if (composerService() == nullptr)
+        return NO_ERROR;
+
     gui::DisplayStatInfo stats;
     binder::Status status = composerServiceAIDL()->getDisplayStats(nullptr, &stats);
     if (!status.isOk()) {
@@ -1208,6 +1218,10 @@ int Surface::queueBuffers(const std::vector<BatchQueuedBuffer>& buffers) {
 void Surface::querySupportedTimestampsLocked() const {
     // mMutex must be locked when calling this method.
 
+    // Halium: SurfaceFlinger is not running
+    if (composerService() == nullptr)
+        return;
+
     if (mQueriedSupportedTimestamps) {
         return;
     }
@@ -2592,6 +2606,10 @@ void Surface::ProducerListenerProxy::onBuffersDiscarded(const std::vector<int32_
 
 status_t Surface::setFrameRate(float frameRate, int8_t compatibility,
                                int8_t changeFrameRateStrategy) {
+
+    // Halium: Disabled
+    return NO_ERROR;
+
 #if COM_ANDROID_GRAPHICS_LIBGUI_FLAGS(BQ_SETFRAMERATE)
     if (flags::bq_setframerate()) {
         status_t err = mGraphicBufferProducer->setFrameRate(frameRate, compatibility,
diff --git a/libs/gui/SurfaceComposerClient.cpp b/libs/gui/SurfaceComposerClient.cpp
index 4f1356b..b02e86c 100644
--- a/libs/gui/SurfaceComposerClient.cpp
+++ b/libs/gui/SurfaceComposerClient.cpp
@@ -96,8 +96,13 @@ ComposerService::ComposerService()
 }
 
 bool ComposerService::connectLocked() {
+
+    // Halium: Disabled
+    /*
     const String16 name("SurfaceFlinger");
     mComposerService = waitForService<ISurfaceComposer>(name);
+    */
+
     if (mComposerService == nullptr) {
         return false; // fatal error or permission problem
     }
-- 
2.45.2

